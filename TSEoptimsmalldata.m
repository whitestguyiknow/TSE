%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Title:            Optimization
% Version:          2.00
%
% Description:      main engine for Bug Testing and Development with small amount of data,
%                   function collection in ./func/
%                   indicator functions in ./indicators/
%                   optimizer in ./DE/
%                   objective functions in ./obj/
%                   plot functions in ./plotfunc/
%                   saved plots in ./plot/
%                   data in ./dat/
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear
clc
close all

%% Initializing
% setup
setup();
% system parameter
sys_par = getSysPar();
% optim parameter
optimStruct = getOptimPar_test(sys_par); %only for testing
% optimStruct = getOptimPar(sys_par);
      

%% Data processing%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
jj = 1; %select underlying
%put together sting of time steps
if size(sys_par.tVec,2) == 1
    stringTimes = num2str(sys_par.tVec');
else
    stringTimes = num2str(sys_par.tVec);
end
stringTimes = stringTimes(~isspace(stringTimes));
stringConfig = [sys_par.sysName,'_',sys_par.underlying{jj},'_',num2str(sys_par.lengthData),'M',stringTimes];
try
    %load file with compressed tick data
    load(['./dat/',sys_par.underlying{jj},num2str(sys_par.lengthData),'M',stringTimes,'.mat']);
    disp('existing compressed tick data loaded from folder')
catch
    disp('compressed tick data is generated')
    %generate compressed tick data
    generateDataSet(sys_par,jj)
    load(['./dat/',sys_par.underlying{jj},num2str(sys_par.lengthData),'M',stringTimes,'.mat']);
end

%assing data to standard variables
eval(['underlying_pre = ',sys_par.underlying{jj},'_pre;'])
for ii = 1:length(sys_par.tVec)
    eval(['underlying_t',num2str(ii),' = ',sys_par.underlying{jj},'_t',num2str(ii),';'])
end

% function handles to precomputed, global indicators
  fSdev = @(DS,i,t) sdev(DS,i,t);% Standarddeviation of underlying of last t datapoints
  
% append indicator values
  underlying_t1 = appendIndicator(underlying_t1,sys_par,'sdev',fSdev,50);
  underlying_t2 = appendIndicator(underlying_t2,sys_par,'sdev',fSdev,50);
  
% partitioning
%% partitioning
% t1
dataParti_t1 = partition(underlying_pre,underlying_t1,sys_par);
% t2
dataParti_t2 = partition(underlying_pre,underlying_t2,sys_par);

% insample
underlying_pre_is =     dataParti_t1.preIs;
underlying_t1_is =      dataParti_t1.tIs;
underlying_t2_is =      dataParti_t2.tIs;

% outsample
underlying_pre_oos =    dataParti_t1.preOs;
underlying_t1_oos =     dataParti_t1.tOs;
underlying_t2_oos =     dataParti_t2.tOs;

%% Setting entry and exit rules & optimization%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if exist(['./dat/optresults/bestever_',stringConfig,'.mat'],'file') %check there already exists solution
    dlgTitle    = 'Optimization';
    dlgQuestion = 'There already exists a solution. Do you want to optimize again?';
    choice = questdlg(dlgQuestion,dlgTitle,'Yes','No', 'Yes');
    if strcmp(choice,'Yes')
        optimize_on = 1;
    else
        optimize_on = 0;
        disp('existing optimal parameter set loaded')
    end
else
    optimize_on = 1;
end
    
if optimize_on
    disp('new optimal parameter set generated by optimization algorithm')
    %(entry and exit rules defind in optimintraday or optimdaily)
    addpath('./optimize/');
    %Intraday Optimisation. (For Daily Optimisation use optimdaily instead of
    %optimintraday
    timeoptimstart=clock;

    [obj,par,counteval,stopflag,out,bestever] = ...
        CMAoptim(sys_par.tradingSystem,optimStruct.xinit,[],optimStruct,underlying_pre_is,underlying_t1_is,underlying_t2_is,sys_par);
    timeoptimend=clock;
    evaltime= roundn(floor(etime(timeoptimend,timeoptimstart))/60,-1);
    N_cpu= feature('numCores');
    fprintf('Time used for optimisation: %.1f min with %.0f CPUs\n', evaltime,N_cpu);
    %save bestever
    if ~exist('./dat/optresults/')
        mkdir('./dat/optresults/)');
    end
    save(['./dat/optresults/bestever_',stringConfig,'.mat'],'bestever')
end
%% out and in of sample run of sample run
%load bestever from optimization
load(['./dat/optresults/bestever_',stringConfig,'.mat'])
%insample run
[~,isTradingTable,isDailyTT] =      feval(sys_par.tradingSystem,bestever.x,underlying_pre_is,underlying_t1_is,underlying_t2_is,sys_par);

%out of sample run
[~,oosTradingTable,oosDailyTT] =    feval(sys_par.tradingSystem,bestever.x,underlying_pre_oos,underlying_t1_oos,underlying_t2_oos,sys_par);

%save
save( ['./dat/optresults/Trtables_',stringConfig,'.mat'], 'isTradingTable', 'isDailyTT', 'oosTradingTable', 'oosDailyTT');

%% plotting
ii = 1; %select time step of tVec

%Loading results test
load(['./dat/optresults/Trtables_',stringConfig,'.mat']);

%Performance Analytics
plot_cumret_dens_invsout(isTradingTable.Return,oosTradingTable.Return, ...
    sys_par.underlying{jj}, sys_par.sysName, sys_par.lengthData, sys_par.tVec(ii))

%Boxplot
tBox = 60; %time step of boxplot
if sys_par.tVec(ii) > 60
    tBox = sys_par.tVec(ii);
end;
boxInVsOut( isTradingTable, oosTradingTable,tBox, ...
    sys_par.underlying{jj}, sys_par.sysName, sys_par.lengthData, sys_par.tVec(ii) );
%%
%AV:Performance Analytics Table (saved under: /statistics/systems/perfan_'SystemName'_'Underlying'_'Zeitintervall'.csv)
perfAnTable(isTradingTable, isDailyTT,...
    oosTradingTable, oosDailyTT,...
    underlying_pre, sys_par.sysName, sys_par.underlying, sys_par.tVec(ii),...
    sys_par.lengthData, bestever)






